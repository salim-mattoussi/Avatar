/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useMemo, useRef, useState } from "react";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
//import scene from '../../public/models/SalimTalk.glb'
import {useControls} from "leva"
import { useFrame , useLoader } from "@react-three/fiber";
import * as THREE from "three"


const corresponding = {
    A: "viseme_PP",
    B: "viseme_kk",
    C: "viseme_I",
    D: "viseme_AA",
    E: "viseme_O",
    F: "viseme_U",
    G: "viseme_FF",
    H: "viseme_TH",
    X: "viseme_PP",
  };



export function Avatar(props) {
const {playAudio , script} = useControls({
    playAudio: false,
    script:{
        value :"welcome",
        options:["welcome","studies","experience"]
    }
})


const audio = useMemo(()=> new Audio (`/audio/${script}.mp3`),[script])
const jsonFile = useLoader(THREE.FileLoader, `audio/${script}.json`)
const lipsync = JSON.parse(jsonFile)

useFrame(()=>{
    const currentAudioTime = audio.currentTime;

    if (audio.paused || audio.ended){ setAnimation("Idle")}

    Object.values(corresponding).forEach((value)=>{
        nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[value]]=0;
        nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[value]]=0;
        
    })

    for (let i =0; i< lipsync.mouthCues.length;i++){
        const mouthCue = lipsync.mouthCues[i];
        if (currentAudioTime >= mouthCue.start && currentAudioTime <= mouthCue.end){
            console.log(mouthCue.value);
            nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]]=1;
            nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCue.value]]]=1;
            break;
        }
    }
})



useEffect(()=>{
    if (playAudio){
        audio.play();
        if(script === "welcome"){
            setAnimation("Hello")
        }else if (script === "studies"){
          setAnimation("Talking")
        }

    }else{
        setAnimation("Idle")
        audio.pause();
    }
},[playAudio,script])

  const { nodes, materials } = useGLTF('/models/SalimTalk.glb');
  const {animations: idleAnimation} = useFBX("/animations/idle.fbx")
  const {animations: helloAnimation} = useFBX("/animations/hello.fbx")
  const {animations: talkingAnimation}= useFBX("/animations/Talking.fbx")
  const {animations: secondAnimation}= useFBX("/animations/second-Idle.fbx")

  
idleAnimation[0].name="Idle"
helloAnimation[0].name = "Hello"
talkingAnimation[0].name ="Talking"
secondAnimation[0].name = "Second"



const [animation , setAnimation ]=useState("Idle")
const group = useRef()
const {actions} =useAnimations([idleAnimation[0],helloAnimation[0],talkingAnimation[0],secondAnimation[0]], group)

useEffect(()=>{
actions[animation].reset().fadeIn(0.5).play();
return ()=> actions[animation].fadeOut(0.5)
},[animation])

  
  return (
    <group {...props} dispose={null} ref={group}>
        <group rotation-x={-Math.PI / 2}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Beard"
        geometry={nodes.Wolf3D_Beard.geometry}
        material={materials.Wolf3D_Beard}
        skeleton={nodes.Wolf3D_Beard.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Beard.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Beard.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      </group>
    </group>
  );
}

useGLTF.preload("/SalimTalk.glb");
